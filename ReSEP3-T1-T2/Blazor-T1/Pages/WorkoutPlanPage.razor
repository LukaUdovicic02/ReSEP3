@page "/WorkoutPlan"
@using Model
@inject IWorkoutPlanService workoutPlanService
@inject NavigationManager navigationManager

<h3>WorkoutPlan</h3>
//Create button "Create new workout"

@if (workoutplanToShow == null)
{
    <p>
        <em> Loading... </em>
    </p>
}

else if (!workoutplanToShow.Any())
{
    <p> No Workout Plans exist, please create one. </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Workout name</th>
            <th>TimeGoal</th>
            <th>Type</th>
            <th>Remove</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var workout in workoutplanToShow)
        {
            <tr>
                <td>@workout.WPname</td>
                <td>@workout.Timegoal</td>
                <td>@workout.Type</td>
                <td>
                      <button @onclick="@(() => EditWorkoutPlan(workout.Wpid))">
                      </button>
                    <button @onclick="@(() => RemoveWorkoutPlan(workout.Wpid))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {

    private List<WorkoutPlan> workoutplanToShow;
    private List<WorkoutPlan> allWorkoutPlans;

    protected override async Task OnInitializedAsync()
    {
        allWorkoutPlans = await workoutPlanService.GetWorkoutPlans();
        workoutplanToShow = allWorkoutPlans;
    }


    private async Task RemoveWorkoutPlan(int workoutWpid)
    {
        await workoutPlanService.DeleteWorkoutPlan(workoutWpid);
        workoutplanToShow.Remove(workoutplanToShow.First(w => w.Wpid == workoutWpid));
        Console.WriteLine("workout plan deleted");
    }
    private void EditWorkoutPlan(int workoutWpid)
    {
        navigationManager.NavigateTo($"/EditWorkout/{workoutWpid}");
    }


}